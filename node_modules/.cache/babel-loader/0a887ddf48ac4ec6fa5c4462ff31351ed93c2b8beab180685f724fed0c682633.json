{"ast":null,"code":"var _jsxFileName = \"C:\\\\Firebase\\\\firebase-react\\\\src\\\\App.js\",\n  _s = $RefreshSig$();\nimport { auth } from \"./auth/firebaseAuth\";\nimport { GoogleAuthProvider, GithubAuthProvider, signInWithPopup } from \"firebase/auth\";\nimport { useState } from \"react\";\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nfunction App() {\n  _s();\n  const [userData, setUserData] = useState(null);\n\n  // 구글 로그인\n  function handleGoogleLogin() {\n    const providerGoogle = new GoogleAuthProvider(); // provider 구글 설정\n    signInWithPopup(auth, providerGoogle) // 팝업창 띄워서 로그인\n    .then(data => {\n      setUserData(data); // user data 설정\n      console.log(data); // console에 UserCredentialImpl 출력\n    }).catch(err => {\n      console.log(err);\n    });\n  }\n\n  // 깃허브 로그인\n  function handleGihhubLogin() {\n    const providerGit = new GithubAuthProvider();\n    signInWithPopup(auth, providerGit).then(result => {\n      // This gives you a GitHub Access Token. You can use it to access the GitHub API.\n      const credential = GithubAuthProvider.credentialFromResult(result);\n      const token = credential.accessToken;\n\n      // The signed-in user info.\n      const user = result.user;\n      setUserData(result);\n      console.log(result);\n\n      // IdP data available using getAdditionalUserInfo(result)\n      // ...\n    }).catch(error => {\n      // Handle Errors here.\n      const errorCode = error.code;\n      const errorMessage = error.message;\n      // The email of the user's account used.\n      const email = error.customData.email;\n      console.log(email);\n      // The AuthCredential type that was used.\n      const credential = GithubAuthProvider.credentialFromError(error);\n      // ...\n    });\n  }\n\n  return /*#__PURE__*/_jsxDEV(\"div\", {\n    children: [/*#__PURE__*/_jsxDEV(\"h3\", {\n      children: \"\\uAD6C\\uAE00 \\uB85C\\uADF8\\uC778 \\uD14C\\uC2A4\\uD2B8\"\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 52,\n      columnNumber: 7\n    }, this), /*#__PURE__*/_jsxDEV(\"button\", {\n      onClick: handleGoogleLogin,\n      children: \"\\uAD6C\\uAE00 \\uB85C\\uADF8\\uC778\"\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 53,\n      columnNumber: 7\n    }, this), /*#__PURE__*/_jsxDEV(\"button\", {\n      onClick: handleGihhubLogin,\n      children: \"\\uAE43\\uD5C8\\uBE0C \\uB85C\\uADF8\\uC778\"\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 54,\n      columnNumber: 7\n    }, this), /*#__PURE__*/_jsxDEV(\"h4\", {\n      children: \"\\uB85C\\uADF8\\uC778\\uD558\\uBA74 \\uC544\\uB798\\uCABD\\uC5D0 \\uC774\\uB984\\uC774 \\uB098\\uD0C0\\uB0A9\\uB2C8\\uB2E4.\"\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 55,\n      columnNumber: 7\n    }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n      style: {\n        whiteSpace: \"pre-line\"\n      },\n      children: userData ? \"당신의 email : \" + userData.user.email + \"\\n당신의 displayName\" + userData.user.displayName + \"\\n당신의 accessToken : \" + userData.user.accessToken + \"\\n당신의 idToken : \" + userData._tokenResponse.idToken : \"로그인 버튼을 눌러주세요 :)\"\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 56,\n      columnNumber: 7\n    }, this)]\n  }, void 0, true, {\n    fileName: _jsxFileName,\n    lineNumber: 51,\n    columnNumber: 5\n  }, this);\n}\n_s(App, \"hXjgW5Dna7AfY8GclqpRKYNaYWw=\");\n_c = App;\nexport default App;\nvar _c;\n$RefreshReg$(_c, \"App\");","map":{"version":3,"names":["auth","GoogleAuthProvider","GithubAuthProvider","signInWithPopup","useState","jsxDEV","_jsxDEV","App","_s","userData","setUserData","handleGoogleLogin","providerGoogle","then","data","console","log","catch","err","handleGihhubLogin","providerGit","result","credential","credentialFromResult","token","accessToken","user","error","errorCode","code","errorMessage","message","email","customData","credentialFromError","children","fileName","_jsxFileName","lineNumber","columnNumber","onClick","style","whiteSpace","displayName","_tokenResponse","idToken","_c","$RefreshReg$"],"sources":["C:/Firebase/firebase-react/src/App.js"],"sourcesContent":["import { auth } from \"./auth/firebaseAuth\";\nimport { GoogleAuthProvider, GithubAuthProvider, signInWithPopup } from \"firebase/auth\";\nimport { useState } from \"react\";\n\nfunction App() {\n  const [userData, setUserData] = useState(null);\n\n  // 구글 로그인\n  function handleGoogleLogin() {\n    const providerGoogle = new GoogleAuthProvider(); // provider 구글 설정\n    signInWithPopup(auth, providerGoogle) // 팝업창 띄워서 로그인\n      .then((data) => {\n        setUserData(data); // user data 설정\n        console.log(data); // console에 UserCredentialImpl 출력\n      })\n      .catch((err) => {\n        console.log(err);\n      });\n  }\n\n  // 깃허브 로그인\n  function handleGihhubLogin() {\n    const providerGit = new GithubAuthProvider();\n    signInWithPopup(auth, providerGit)\n    .then((result) => {\n      // This gives you a GitHub Access Token. You can use it to access the GitHub API.\n      const credential = GithubAuthProvider.credentialFromResult(result);\n      const token = credential.accessToken;\n      \n      // The signed-in user info.\n      const user = result.user;\n      setUserData(result);\n      console.log(result);\n\n      // IdP data available using getAdditionalUserInfo(result)\n      // ...\n    }).catch((error) => {\n      // Handle Errors here.\n      const errorCode = error.code;\n      const errorMessage = error.message;\n      // The email of the user's account used.\n      const email = error.customData.email;\n      console.log(email);\n      // The AuthCredential type that was used.\n      const credential = GithubAuthProvider.credentialFromError(error);\n      // ...\n  });\n}\n\n  return (\n    <div>\n      <h3>구글 로그인 테스트</h3>\n      <button onClick={handleGoogleLogin}>구글 로그인</button>\n      <button onClick={handleGihhubLogin}>깃허브 로그인</button>\n      <h4>로그인하면 아래쪽에 이름이 나타납니다.</h4>\n      <div style={{whiteSpace:\"pre-line\"}}>\n        {userData\n          ? \"당신의 email : \" + userData.user.email\n          + \"\\n당신의 displayName\" + userData.user.displayName\n          + \"\\n당신의 accessToken : \" + userData.user.accessToken \n          + \"\\n당신의 idToken : \" + userData._tokenResponse.idToken\n          : \"로그인 버튼을 눌러주세요 :)\"}\n      </div>\n    </div>\n  );\n}\n\nexport default App;\n"],"mappings":"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"},"metadata":{},"sourceType":"module","externalDependencies":[]}